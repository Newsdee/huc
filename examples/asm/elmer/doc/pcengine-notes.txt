; ***************************************************************************
; ***************************************************************************
;
; https://www.renesas.com/sg/en/www/doc/application-note/an1695.pdf
;
; 21.47727MHz clock crystal / 24 -> 0.89MHz -> Tandy Color Computer CPU
; 21.47727MHz clock crystal / 21 -> 1.02MHz -> Commodore 64 CPU
; 21.47727MHz clock crystal / 12 -> 1.79MHz -> Atari 800 CPU
; 21.47727MHz clock crystal / 8 ->  2.68MHz -> SNES RAM
; 21.47727MHz clock crystal / 6 ->  3.58MHz -> SNES CPU & NTSC Color Modulation
; 21.47727MHz clock crystal / 3 ->  7.16MHz -> PC Engine CPU & RAM
;

; ***************************************************************************
; PC ENGINE VCE TIMING
; ***************************************************************************
;
; 21.47727MHz VCE clock crystal / 4 ->  5.36MHz VDC clock (186ns)
; 21.47727MHz VCE clock crystal / 3 ->  7.16MHz VDC clock (140ns)
; 21.47727MHz VCE clock crystal / 2 -> 10.74MHz VDC clock ( 93ns)
;
;  63.556us /hsync to /hsync total line time, i.e. 15734.2Hz NTSC
;
;       1365 VCE clocks @ 21.47727MHz
;
;        -> 341.25 VDC cycles @  5.36MHz (42.7 chr)
;        -> 455.00 VDC cycles @  7.16MHz (56.9 chr)
;        -> 682.50 VDC cycles @ 10.74MHz (85.3 chr)
;
;  11.035us /hsync duration
;
;        237 VCE clocks @ 21.47727MHz
;
;        ->  59.25 VDC clocks @  5.36MHz
;        ->  79.00 VDC clocks @  7.16MHz
;        -> 118.50 VDC clocks @ 10.74MHz
;
;        Note : In the 5.36MHz mode, the 1st cycle in the hblank
;               has an extra 1/4 cycle added (1 clock @ 21.47MHz).
;
;  16.651ms /vsync to /vsync total frame time, if VCE CR bit2 is 0
;
;       357,630 VCE clocks @ 21.47727MHz
;
;        -> 119,210 CPU clocks @ 7.16MHz
;
;  16.715ms /vsync to /vsync total frame time, if VCE CR bit2 is 1
;
;       358,995 VCE clocks @ 21.47727MHz
;
;        -> 119,665 CPU clocks @ 7.16MHz
;
;   1.907ms /vsync duration
;
;         4,095 VCE clocks @ 21.47727MHz
;
;        ->   1,365 CPU clocks @ 7.16MHz
;



; ***************************************************************************
; PC ENGINE VDC SPRITES-PER-LINE LIMITS
; ***************************************************************************
;
; This is caused by the VDC running out of time to load the pixel data for
; the next line's sprites during the blank time after it is done displaying
; the current line's pixel data.
;
; VDC @  5.36MHz -> width = total # chr on line = 42 chr
; VDC @  7.16MHz -> width = total # chr on line = 56 chr
; VDC @ 10.74MHz -> width = total # chr on line = 85 chr
;
; Sprites-per-line shown (@ 1-clk-per-access) = (width - 2 - (hdw + 1)) * 2
; Sprites-per-line shown (@ 2-clk-per-access) = (width - 2 - (hdw + 1))
;
; The hdw value also limits the number of sprite SAT entries that the VDC is
; able to scan to find the sprites that are on the next line.
;
;
; VDC @  5.36MHz, MWR=$x0 (1-clk-per-access)
;
;   hds $02 hdw $1C -> 29 chr = 232 pxl -> 59 SAT searched, 16 sprites shown
;   hds $02 hdw $1D -> 30 chr = 240 pxl -> 61 SAT searched, 16 sprites shown
;   hds $02 hdw $1E -> 31 chr = 248 pxl -> 63 SAT searched, 16 sprites shown
;   hds $02 hdw $1F -> 32 chr = 256 pxl -> 64 SAT searched, 16 sprites shown
;   hds $02 hdw $20 -> 33 chr = 264 pxl -> 64 SAT searched, 14 sprites shown
;   hds $02 hdw $21 -> 34 chr = 272 pxl -> 64 SAT searched, 12 sprites shown
;
;
; VDC @  7.16MHz, MWR=$x0 (1-clk-per-access)
;
;   hds $07 hdw $1C -> 29 chr = 232 pxl -> 59 SAT searched, 16 sprites shown
;   hds $07 hdw $1D -> 30 chr = 240 pxl -> 61 SAT searched, 16 sprites shown
;   hds $07 hdw $1E -> 31 chr = 248 pxl -> 63 SAT searched, 16 sprites shown
;   hds $07 hdw $1F -> 32 chr = 256 pxl -> 64 SAT searched, 16 sprites shown
;   ...
;   hds $06 hdw $25 -> 38 chr = 304 pxl -> 64 SAT searched, 16 sprites shown
;   ...
;   hds $03 hdw $2B -> 44 chr = 352 pxl -> 64 SAT searched, 16 sprites shown
;   hds $03 hdw $2C -> 45 chr = 360 pxl -> 64 SAT searched, 16 sprites shown
;   hds $03 hdw $2D -> 46 chr = 368 pxl -> 64 SAT searched, 16 sprites shown
;   hds $03 hdw $2E -> 47 chr = 376 pxl -> 64 SAT searched, 14 sprites shown
;   hds $03 hdw $2F -> 48 chr = 384 pxl -> 64 SAT searched, 12 sprites shown
;
;
; VDC @  7.16MHz, MWR=$xA (2-clk-per-access)
;
;   hds $07 hdw $1C -> 29 chr = 232 pxl -> 58 SAT searched, 16 sprites shown
;   hds $07 hdw $1D -> 30 chr = 240 pxl -> 60 SAT searched, 16 sprites shown
;   hds $07 hdw $1E -> 31 chr = 248 pxl -> 62 SAT searched, 16 sprites shown
;   hds $07 hdw $1F -> 32 chr = 256 pxl -> 64 SAT searched, 16 sprites shown
;   ...
;   hds $06 hdw $25 -> 38 chr = 304 pxl -> 64 SAT searched, 16 sprites shown
;   hds $05 hdw $26 -> 39 chr = 312 pxl -> 64 SAT searched, 15 sprites shown
;   hds $05 hdw $27 -> 40 chr = 320 pxl -> 64 SAT searched, 14 sprites shown
;   hds $04 hdw $28 -> 41 chr = 328 pxl -> 64 SAT searched, 13 sprites shown
;   hds $04 hdw $29 -> 42 chr = 336 pxl -> 64 SAT searched, 12 sprites shown
;   hds $03 hdw $2A -> 43 chr = 344 pxl -> 64 SAT searched, 11 sprites shown
;   hds $03 hdw $2B -> 44 chr = 352 pxl -> 64 SAT searched, 10 sprites shown
;
;
; VDC @ 10.74MHz, MWR=$xA (2-clk-per-access)
;
;   hds $17 hdw $1C -> 29 chr = 232 pxl -> 58 SAT searched, 16 sprites shown
;   hds $17 hdw $1D -> 30 chr = 240 pxl -> 60 SAT searched, 16 sprites shown
;   hds $17 hdw $1E -> 31 chr = 248 pxl -> 62 SAT searched, 16 sprites shown
;   hds $17 hdw $1F -> 32 chr = 256 pxl -> 64 SAT searched, 16 sprites shown
;   ...
;   hds $0B hdw $3B -> 60 chr = 480 pxl -> 64 SAT searched, 16 sprites shown
;   ...
;   hds $0B hdw $3F -> 64 chr = 512 pxl -> 64 SAT searched, 16 sprites shown
;   hds $0B hdw $40 -> 65 chr = 520 pxl -> 64 SAT searched, 16 sprites shown
;   hds $0B hdw $41 -> 66 chr = 528 pxl -> 64 SAT searched, 16 sprites shown
;   hds $0B hdw $42 -> 67 chr = 536 pxl -> 64 SAT searched, 16 sprites shown
;   hds $0B hdw $43 -> 68 chr = 544 pxl -> 64 SAT searched, 15 sprites shown
;   hds $0B hdw $44 -> 69 chr = 552 pxl -> 64 SAT searched, 14 sprites shown
;



; ***************************************************************************
; PC ENGINE VDC RCR-INTERRUPT TO VDC BYR-REGISTER SHADOWED TIMING
; ***************************************************************************
;
;
;  5.36MHz (with MWR = $x0)
;
;   Safe to write BYR @ 100 cpu cycles if width=240 hdw=$1D
;   Safe to write BYR @  90 cpu cycles if width=248 hdw=$1E
;   Safe to write BYR @  79 cpu cycles if width=256 hdw=$1F
;     (88 to BYR & CR, 90 to BXR from HW IRQ1, including 8-cycle CPU response)
;   Safe to write BYR @  67 cpu cycles if width=264 hdw=$20
;
; Flashing (i.e. unstable latching) at 5.36MHz (with MWR = $x0), width=256 ..
;     (87 cycles to BYR & CR, 89 to BXR from HW IRQ1, including 8-cycle CPU response)
;
;
;  7.16MHz (with MWR = $x0)
;
;   Safe to write BYR @ 106 cpu cycles if width=320 hdw=$27
;   Safe to write BYR @  98 cpu cycles if width=328 hdw=$28
;   Safe to write BYR @  90 cpu cycles if width=336 hdw=$29
;   Safe to write BYR @  82 cpu cycles if width=344 hdw=$2A
;   Safe to write BYR @  74 cpu cycles if width=352 hdw=$2B
;     (83 to BYR, 84 to CR, 85 to BXR from HW IRQ1, including 8-cycle CPU response)
;
; Flashing (i.e. unstable latching) at 7.16MHz (with MWR = $x0), width=352 ..
;     (82 cycles to BYR & CR, 84 to BXR from HW IRQ1, including 8-cycle CPU response)
;
;
; 10.74MHz (with MWR = $xA)
;
;   Safe to write BYR @ 112 cpu cycles if width=480 hdw=$3B
;   Safe to write BYR @ 107 cpu cycles if width=488 hdw=$3C
;   Safe to write BYR @ 101 cpu cycles if width=496 hdw=$3D
;   Safe to write BYR @  96 cpu cycles if width=504 hdw=$3E
;   Safe to write BYR @  91 cpu cycles if width=512 hdw=$3F
;     (100 to BYR & CR, 101 to BXR from HW IRQ1, including 8-cycle CPU response)
;   Safe to write BYR @  85 cpu cycles if width=520 hdw=$40
;   Safe to write BYR @  79 cpu cycles if width=528 hdw=$41
;   Safe to write BYR @  75 cpu cycles if width=536 hdw=$42
;   Safe to write BYR @  69 cpu cycles if width=544 hdw=$43
;
;
; Note: The VDC's hde,hsw, & hds settings have *NO* effect!!!
;
; Note: These cycle timings are to the write-cycle within the
;       instruction, and not to the start of the instruction.
;
; Note: The VDC shadows/locks the BYR register a cycle before
;       the BXR register, so write BYR first.
;



; ***************************************************************************
; PC ENGINE VDC SPRITE PATTERN CODES
; ***************************************************************************

fedcba98765zzzzz = 32-word granularity = 64-byte granularity, designed for 16x16-2bpp

---------X-zzzzz = for 32-wide
-------YY--zzzzz = for 64-high

fedcba9yyx0----- = 512-word granularity = 1KB-byte granularity, designed for 32x64-4bpp



; ***************************************************************************
; PC ENGINE VDC BURST MODE
; ***************************************************************************

When is Burst Mode triggered (i.e. locked in for the next frame) so that any
changes to the VDC's R05 BG and SPR bits will be ignored for the next frame?

For a centered 208 high screen, Burst Mode is triggered between lines 229/230.
For a centered 224 high screen, Burst Mode is triggered between lines 237/238.
For a centered 240 high screen, Burst Mode is triggered between lines 245/246.

These basically correspond to VCE line 260, which is the start of the VSYNC
pulse.

(N.B. Add +64 for the RCR line.)



; ***************************************************************************
; PC ENGINE VDC DMA TIMINGS
; ***************************************************************************

Resolution ............................................... 256x222 .. 256x224

LINE-220-RCR-to-VBLANK CPU cycles ........................... 1010 ..... 1920
LINE-220-RCR-to-SATB-DMA-END CPU cycles ..................... 2398 ..... 3308
LINE-220-RCR-to-128-WORD-VRAM-DMA-END CPU cycles ............ 1702 ..... 2612
LINE-220-RCR-to-256-WORD-VRAM-DMA-END CPU cycles ............ 2396 ..... 3306
LINE-220-RCR-to-512-WORD-VRAM-DMA-END CPU cycles ............ 3782 ..... 4692
LINE-220-RCR-to-SATB-AND-256-WORD-VRAM-DMA-END CPU cycles ... 3790 ..... 4700

1388 CPU cycles = 1040 VDC cycles for 256-word SATB-DMA


Resolution ............................................... 352x222 .. 352x224

LINE-220-RCR-to-VBLANK CPU cycles ........................... 1002 ..... 1912
LINE-220-RCR-to-SATB-DMA-END CPU cycles ..................... 2042 ..... 2952
LINE-220-RCR-to-128-WORD-VRAM-DMA-END CPU cycles ............ 1522 ..... 2432
LINE-220-RCR-to-256-WORD-VRAM-DMA-END CPU cycles ............ 2042 ..... 2952
LINE-220-RCR-to-512-WORD-VRAM-DMA-END CPU cycles ............ 3080 ..... 3990
LINE-220-RCR-to-SATB-AND-256-WORD-VRAM-DMA-END CPU cycles ... 3084 ..... 3994

1040 CPU cycles = 1040 VDC cycles for 256-word SATB-DMA


Resolution ............................................... 512x222 .. 512x224

LINE-220-RCR-to-VBLANK CPU cycles ........................... 1016 ..... 1926
LINE-220-RCR-to-SATB-DMA-END CPU cycles ..................... 1700 ..... 2610
LINE-220-RCR-to-128-WORD-VRAM-DMA-END CPU cycles ............ 1358 ..... 2268
LINE-220-RCR-to-256-WORD-VRAM-DMA-END CPU cycles ............ 1700 ..... 2610
LINE-220-RCR-to-512-WORD-VRAM-DMA-END CPU cycles ............ 2386 ..... 3296
LINE-220-RCR-to-SATB-AND-256-WORD-VRAM-DMA-END CPU cycles ... 2390 ..... 3300

684 CPU cycles = 1026 VDC cycles for 256-word SATB-DMA


Resolution (TV Sports Football: VSW=0, VDS=20 22-lines) .. 352x240 .. 352x242

LINE-220-RCR-to-VBLANK CPU cycles ........................... 9192 ..... 9646
LINE-220-RCR-to-SATB-DMA-END CPU cycles .................... 10232 .... 10686
LINE-220-RCR-to-128-WORD-VRAM-DMA-END CPU cycles ............ 9712 .... 10168
LINE-220-RCR-to-256-WORD-VRAM-DMA-END CPU cycles ........... 10232 .... 10686
LINE-220-RCR-to-512-WORD-VRAM-DMA-END CPU cycles ........... 11270 .... 11724
LINE-220-RCR-to-SATB-AND-256-WORD-VRAM-DMA-END CPU cycles .. 11274 .... 11728
